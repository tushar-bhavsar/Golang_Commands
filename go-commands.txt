All the commands related to Go-Lang will be added here for future reference

#01 To Check the version of the Go : go version

* before creating any project make sure to create three folders
  1-bin
  2-pkg
  3-src

#02 To get repositories from github : go get -d github repositories url

#03 To run the file with .go extension = go run (needs a file name, eg, go run main.go)
                                         go run <file name>
                                         go run *.go (to run all files which has .go extention)

#04 To Build an EXE file of the Go Application = go build (for an executable:builds the file,reports errors, if any
                                                  if there are no errors, it puts an executable into the current folder)
                                                 (for a package:builds the file reports errors, if any throws away binary

#05 To Build an EXE file of the Go Application = go install (for an executable:compiles the program (builds it) names the executable
                                                 mac: the folder name holding the code
                                                 windows: file name puts the executable in workspace / bin $GOPATH / bin
                                                 (for a package:compiles the package (builds it) puts the executable in workspace / pkg
                                                 $GOPATH / pkg makes it an archive file

#06 : Modules

- A module is a collection of related Go packages that are versioned together as a single unit.
- Modules record precise dependency requirements and create reproducible builds.
- Modules must be semantically versioned according to semver, usually in the form v(major).(minor).(patch), 
  such as v0.1.0, v1.2.3, or v1.5.0-rc.1.
   
Summarizing the relationship between repositories, modules, and packages:

A repository contains one or more Go modules.
Each module contains one or more Go packages.
Each package consists of one or more Go source files in a single directory.

go mod init:- creates a new module, initializing the go.mod file that describes it.
go build, go test:-  and other package-building commands add new dependencies to go.mod as needed.
go get :- changes the required version of a dependency (or adds a new dependency).
go get packagename@verision :- will get that specific version upgrade.
go mod :- tidy removes unused dependencies.
go list -m -versions package name: This will show the list of versions the package. 
go list -m all :- Will show all the imported packages which are the dependencies of the module
Note: In the go list output, the current module, also known as the main module, is always the first line, followed by dependencies sorted by module path.
Info : In addition to go.mod, the go command maintains a file named go.sum containing the expected cryptographic hashes of the content of specific module versions
Info : The indirect comment indicates a dependency is not used directly by this module, only indirectly by other module dependencies

===================================

Basic Programming Structure

# package main : 
  # func main : Will be the entry point to the Go Programming. when your code exits func main, your program is over
  
Info: Packages : Introduction to packages
                 variadic parameters
                - the “...<some type>” is how we signify a variadic parameter
                - the type “interface{}” is the empty interface
                  every value is also of type “interface{}”
                - so the parameter “...interface{}” means “give me as many arguments of any type as you’d like 
                - throwing away returns
                  use the “_” underscore character to throw away returns
                - you can’t have unused variables in your code
                  this is code pollution
                  the compiler doesn’t allow it
                - we use this notation in Go
                  package.Identifier
                      ex: fmt.Println()
                            we would read that: “from package fmt I am using the Println func”
                  an identifier is the name of the variable, constant, func
                - packages
                  code that is already written which you can use
                  imports

=========================================================================================================

Info var keywords : var can be compared to the short declaration but the main difference is that var can be 
                    inserted any where outside or inside the func main body, rather shor declarations has to be 
                    inside the func main bidy.

                    parens ( )
                    curly braces { }

============================================================================================================

Info Types : 

  new command : fmt.Printf("%T\n) : This command is to print the out put with the type of the variable

  #DECLARE a VARIABLE is of a certain TYPE it can only hold VALUES of that TYPE
  #Every variable has a declaration attached to it which has a value.

==========================================================================================================

Info Zero value :

                #understanding zero value
                  -false for booleans
                  -0 for integers
                  -0.0 for floats
                  -"" for strings
                  -nil for 
                      -pointers
                      -functions
                      -interfaces
                      -slices
                      -channels
                      -maps

===============================================================================================

Info fmt package

Examples of fmt printing

group #1 - general printing to standard out
           func Print(a ...interface{}) (n int, err error)
           func Printf(format string, a ...interface{}) (n int, err error)
           func Println(a ...interface{}) (n int, err error)t
group #2 = printing to a string which you can assign to a variable
           func Sprint(a ...interface{}) string
           func Sprintf(format string, a ...interface{}) string
           func Sprintln(a ...interface{}) string
group #3 - printing to a file or a web server’s response
           func Fprint(w io.Writer, a ...interface{}) (n int, err error)
           func Fprintf(w io.Writer, format string, a ...interface{}) (n int, err error)
           func Fprintln(w io.Writer, a ...interface{}) (n int, err error)

==========================================================================================

Bool :- A boolean type represents the set of Boolean truth values denoted by the predeclared constants true and false. The predeclared boolean type is bool; it is a defined type

INT : A numeric type represents sets of integer or floating-point values.

  Example : 
            - uint8       the set of all unsigned  8-bit integers (0 to 255)
            - int8        the set of all signed  8-bit integers (-128 to 127)
            - float32     the set of all IEEE-754 32-bit floating-point numbers
            - byte        alias for uint8
            - rune        alias for int32
            - There is also a set of predeclared numeric types with implementation-specific sizes:
              - uint     either 32 or 64 bits
              - int      same size as uint

String : a string is in effect a read-only slice of bytes.It's important to state right up front that a string holds arbitrary bytes. It is not required to hold Unicode text, UTF-8 text, or any other predefined format. 
As far as the content of a string is concerned, it is exactly equivalent to a slice of bytes.

s := "This is a sample for Strings"
s := `"This is an another sample for Strings" , from Golang`









